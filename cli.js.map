{"version":3,"sources":["cli.ts"],"names":["runValidation","args","process","argv","slice","showHelp","console","log","parseArgs","length","includes","exit","config","apiUrl","httpMethod","authType","authCredentials","customHeaders","requestBody","options","json","verbose","i","token","key","username","password","error","formatResults","results","JSON","stringify","output","summary","hasFailures","failed","icon","warnings","passed","total","sections","category","section","Object","entries","tests","failures","filter","t","status","repeat","test","testIcon","message","main","parsed","stdout","write","errorMessage","Error","stack"],"mappings":"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","file":"cli.js","sourcesContent":["#!/usr/bin/env node\n\n/**\n * JSON:API Validator CLI\n *\n * Command-line interface for validating JSON:API v1.1 compliance\n *\n * Usage:\n *   jsonapi-validator <url> [options]\n *\n * Options:\n *   --method <method>     HTTP method (default: GET)\n *   --auth-type <type>    Authentication type: none, bearer, apiKey, basic (default: none)\n *   --token <token>       Bearer token\n *   --api-key <key>       API key\n *   --username <user>     Basic auth username\n *   --password <pass>     Basic auth password\n *   --body <json>         Request body (JSON string)\n *   --json                Output results as JSON\n *   --verbose             Show detailed output\n *   --help                Show this help message\n */\n\nimport { runValidation } from './src/utils/ValidationService.js';\nimport type { ValidationReport } from './src/types/validation.js';\n\n/**\n * CLI configuration for API validation\n */\ninterface CliConfig {\n  apiUrl: string;\n  httpMethod: string;\n  authType: 'none' | 'bearer' | 'apiKey' | 'basic';\n  authCredentials: {\n    token?: string;\n    key?: string;\n    username?: string;\n    password?: string;\n  };\n  customHeaders: Record<string, string>;\n  requestBody: string;\n}\n\n/**\n * CLI output options\n */\ninterface CliOptions {\n  json: boolean;\n  verbose: boolean;\n}\n\n/**\n * Parsed command-line arguments\n */\ninterface ParsedArgs {\n  config: CliConfig;\n  options: CliOptions;\n}\n\nconst args: string[] = process.argv.slice(2);\n\n/**\n * Display help message\n */\nfunction showHelp(): void {\n  console.log(`\nJSON:API Validator CLI\n\nUsage:\n  jsonapi-validator <url> [options]\n\nOptions:\n  --method <method>     HTTP method (default: GET)\n  --auth-type <type>    Authentication type: none, bearer, apiKey, basic (default: none)\n  --token <token>       Bearer token for bearer authentication\n  --api-key <key>       API key for apiKey authentication\n  --username <user>     Username for basic authentication\n  --password <pass>     Password for basic authentication\n  --body <json>         Request body as JSON string\n  --json                Output results as JSON\n  --verbose             Show detailed validation output\n  --help                Show this help message\n\nExamples:\n  # Validate a simple endpoint\n  jsonapi-validator https://api.example.com/articles\n\n  # Validate with bearer token\n  jsonapi-validator https://api.example.com/articles --auth-type bearer --token YOUR_TOKEN\n\n  # Validate a POST request with body\n  jsonapi-validator https://api.example.com/articles --method POST --body '{\"data\":{\"type\":\"articles\"}}'\n\n  # Get JSON output for scripting\n  jsonapi-validator https://api.example.com/articles --json\n`);\n}\n\n/**\n * Parse command-line arguments into config and options\n * @returns Parsed configuration and options\n */\nfunction parseArgs(): ParsedArgs {\n  if (args.length === 0 || args.includes('--help')) {\n    showHelp();\n    process.exit(0);\n  }\n\n  const config: CliConfig = {\n    apiUrl: args[0] || '',\n    httpMethod: 'GET',\n    authType: 'none',\n    authCredentials: {},\n    customHeaders: {},\n    requestBody: ''\n  };\n\n  const options: CliOptions = {\n    json: false,\n    verbose: false\n  };\n\n  for (let i = 1; i < args.length; i++) {\n    switch (args[i]) {\n      case '--method':\n        config.httpMethod = args[++i] || 'GET';\n        break;\n      case '--auth-type':\n        config.authType = (args[++i] as 'none' | 'bearer' | 'apiKey' | 'basic') || 'none';\n        break;\n      case '--token':\n        config.authCredentials.token = args[++i];\n        break;\n      case '--api-key':\n        config.authCredentials.key = args[++i];\n        break;\n      case '--username':\n        config.authCredentials.username = args[++i];\n        break;\n      case '--password':\n        config.authCredentials.password = args[++i];\n        break;\n      case '--body':\n        config.requestBody = args[++i] || '';\n        break;\n      case '--json':\n        options.json = true;\n        break;\n      case '--verbose':\n        options.verbose = true;\n        break;\n      default:\n        console.error(`Unknown option: ${args[i]}`);\n        process.exit(1);\n    }\n  }\n\n  return { config, options };\n}\n\n/**\n * Format validation results for display\n * @param results - Validation results\n * @param options - CLI options\n * @returns Formatted output string\n */\nfunction formatResults(results: ValidationReport, options: CliOptions): string {\n  if (options.json) {\n    return JSON.stringify(results, null, 2);\n  }\n\n  let output = '\\n';\n\n  // Summary\n  const summary = results.summary;\n  const hasFailures = summary.failed > 0;\n  const icon = hasFailures ? '❌' : summary.warnings > 0 ? '⚠️' : '✅';\n\n  output += `${icon} Validation ${hasFailures ? 'Failed' : 'Completed'}\\n`;\n  output += `━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n`;\n  output += `  Passed:   ${summary.passed}\\n`;\n  output += `  Failed:   ${summary.failed}\\n`;\n  output += `  Warnings: ${summary.warnings}\\n`;\n  output += `  Total:    ${summary.total}\\n\\n`;\n\n  // Detailed results if verbose or if there are failures\n  if (options.verbose || hasFailures || summary.warnings > 0) {\n    if (results.sections) {\n      for (const [category, section] of Object.entries(results.sections)) {\n        const tests = section.tests || [];\n        const failures = tests.filter(t => t.status === 'failed');\n        const warnings = tests.filter(t => t.status === 'warning');\n\n        if (failures.length > 0 || warnings.length > 0 || options.verbose) {\n          output += `\\n${category}\\n`;\n          output += `${'─'.repeat(category.length)}\\n`;\n\n          for (const test of tests) {\n            if (test.status === 'failed' || test.status === 'warning' || options.verbose) {\n              const testIcon = test.status === 'failed' ? '✗' : test.status === 'warning' ? '⚠' : '✓';\n              output += `  ${testIcon} ${test.test}\\n`;\n\n              if (test.message) {\n                output += `     ${test.message}\\n`;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return output;\n}\n\n/**\n * Main CLI execution function\n */\nasync function main(): Promise<void> {\n  let options: CliOptions = { verbose: false, json: false };\n\n  try {\n    const parsed = parseArgs();\n    options = parsed.options;\n    const config = parsed.config;\n\n    if (!options.json) {\n      console.log(`\\n🔍 Validating JSON:API endpoint: ${config.apiUrl}\\n`);\n    }\n\n    const results: ValidationReport = await runValidation(config);\n\n    const output = formatResults(results, options);\n\n    // For JSON output, write directly to stdout without extra formatting\n    if (options.json) {\n      process.stdout.write(output);\n    } else {\n      console.log(output);\n    }\n\n    // Exit with error code if validation failed\n    process.exit(results.summary.failed > 0 ? 1 : 0);\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    console.error(`\\n❌ Error: ${errorMessage}\\n`);\n    if (options.verbose && error instanceof Error) {\n      console.error(error.stack);\n    }\n    process.exit(1);\n  }\n}\n\nmain();\n"]}